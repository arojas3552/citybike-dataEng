name: "CodeQL"

on:
  push:
    branches: [ "main" ]
    paths-ignore:
      - '.github/**'
      - 'etl/**'
      - 'prefect/**'
      - 'tests/**'
      - 'CHANGELOG.md'
      - '.dockerignore'
      - '.gitignore'
      - '.prefectignore'
      - '.pre-commit-config.yaml'
      - '.streamlit'
      - 'README.md'
  pull_request:
    branches: [ "main" ]
  schedule:
    - cron: '15 12 * * 1'
  workflow_dispatch:
    

env:
  GAR_LOCATION: us-east1
  VERSION_NUMBER: '2.39.3'
  REGISTRY_IMAGE: arojas3552/citybike-dataEng


jobs:
  analyze:
    name: Analyze (${{ matrix.language }})
    runs-on: ${{ (matrix.language == 'swift' && 'macos-latest') || 'ubuntu-latest' }}
    timeout-minutes: ${{ (matrix.language == 'swift' && 120) || 360 }}
    permissions:
      # required for all workflows
      security-events: write

      # only required for workflows in private repositories
      actions: read
      contents: read

    strategy:
      fail-fast: false
      matrix:
        include:
        - language: python
          build-mode: none
        # CodeQL supports the following values keywords for 'language': 'c-cpp', 'csharp', 'go', 'java-kotlin', 'javascript-typescript', 'python', 'ruby', 'swift'
        # Use `c-cpp` to analyze code written in C, C++ or both
        # Use 'java-kotlin' to analyze code written in Java, Kotlin or both
        # Use 'javascript-typescript' to analyze code written in JavaScript, TypeScript or both
        # To learn more about changing the languages that are analyzed or customizing the build mode for your analysis,
        # see https://docs.github.com/en/code-security/code-scanning/creating-an-advanced-setup-for-code-scanning/customizing-your-advanced-setup-for-code-scanning.
        # If you are analyzing a compiled language, you can modify the 'build-mode' for that language to customize how
        # your codebase is analyzed, see https://docs.github.com/en/code-security/code-scanning/creating-an-advanced-setup-for-code-scanning/codeql-code-scanning-for-compiled-languages
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    # Initializes the CodeQL tools for scanning.
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        build-mode: ${{ matrix.build-mode }}

    # ‚ÑπÔ∏è Command-line programs to run using the OS shell.
    # üìö See https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsrun
    - if: matrix.build-mode == 'manual'
      run: |
        echo 'If you are using a "manual" build mode for one or more of the' \
          'languages you are analyzing, replace this with the commands to build' \
          'your code, for example:'
        echo '  make bootstrap'
        echo '  make release'
        exit 1

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{matrix.language}}"

  setup:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout 
        uses: actions/checkout@v4

      - name: Set up Python
        uses: 'actions/setup-python@v5.0.0'
        with:
          python-version: 3.11.7

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

  build-streamlit-image:
    runs-on: ubuntu-22.04
    needs: [setup]
    if: |
      always() &&
      (needs.setup.result == 'success')
    steps:
  
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: 'docker/setup-buildx-action@v3.0.0'
        
      - name: Prepare Docker Build Context
        run: |
          mkdir docker-context
          cp ./.dockerignore docker-context
          cp ./Dockerfile docker-context
          cp ./streamlit_app.py docker-context
          cp ./requirements.txt docker-context

         
      - name: Build and Export
        uses: 'docker/build-push-action@v5.0.0'
        with:
          context: ./docker-context
          tags: streamlit:${{ env.VERSION_NUMBER }}
          outputs: type=docker,dest=/tmp/streamlit.tar
          
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: streamlit
          path: /tmp/streamlit.tar
    
  push-artifact-registry:
      permissions:
        contents: 'read'
        id-token: 'write'
        
      runs-on: ubuntu-latest
      needs: [build-streamlit-image]
      if: |
        always() &&
        (needs.build-streamlit-image.result == 'success')
      
      steps:
        - name: Checkout
          uses: actions/checkout@v4
        
        - name: Set up Docker Buildx
          uses: 'docker/setup-buildx-action@v3.0.0'
      
        - name: Download Artifact
          uses: actions/download-artifact@v4
          with:
            name: streamlit
            path: /tmp
          
        - name: Google Auth
          id: auth
          uses: 'google-github-actions/auth@v2'
          with:
            credentials_json: '${{ secrets.GOOGLE_CREDENTIALS }}'

        - name: Docker Auth
          id: docker-auth
          uses: 'docker/login-action@v3'
          with:
            username: _json_key
            password: ${{ secrets.GOOGLE_CREDENTIALS }}
            registry: '${{ env.GAR_LOCATION }}-docker.pkg.dev'

        - name: Load Image
          run: |
            docker load --input /tmp/streamlit.tar
            docker image ls -a
            
        - name: Tag Image
          run: |
            docker tag \
            streamlit:${{ env.VERSION_NUMBER }} \
            "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ secrets.PROJECT_ID }}/${{ secrets.REGISTRY_REPO }}/streamlit:${{ env.VERSION_NUMBER }}"
            
        - name: Push Image
          run: |
            docker push \
            "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ secrets.PROJECT_ID }}/${{ secrets.REGISTRY_REPO }}/streamlit:${{ env.VERSION_NUMBER }}"
         
  deploy-streamlit-image:
    permissions:
      contents: 'read'
      id-token: 'write'
    
    runs-on: ubuntu-latest
    needs: [push-artifact-registry]
    if: |
      always() &&
      (needs.push-artifact-registry.result == 'success')
      
    steps:

      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Google Auth
        id: auth
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GOOGLE_CREDENTIALS }}'
        
      - name: Deploy Image
        id: 'deploy'
        uses: 'google-github-actions/deploy-cloudrun@v2.0.0'
        with: 
          service: ${{ secrets.SERVICE_ID }}
          image: "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ secrets.PROJECT_ID }}/${{ secrets.REGISTRY_REPO }}/streamlit:${{ env.VERSION_NUMBER }}"
          
          
        
          
        
